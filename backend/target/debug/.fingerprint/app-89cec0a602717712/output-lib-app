{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [char]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":17281,"byte_end":17284,"line_start":513,"line_end":513,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [char]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [char]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:513:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m513\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [char]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [String]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":19015,"byte_end":19018,"line_start":562,"line_end":562,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [String]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [String]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:562:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [String]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [bool]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [bool]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [bool]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [bool]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [usize]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [usize]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [usize]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [usize]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u8]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [u8]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u8]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u8]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u16]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [u16]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u16]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u16]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [u32]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u32]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [u64]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [u64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u64]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [isize]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [isize]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [isize]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [isize]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i8]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [i8]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i8]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i8]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i16]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [i16]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i16]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i16]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [i32]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i32]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [i64]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [i64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i64]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [f32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [f32]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [f32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [f32]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [f64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [f64]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22527,"byte_end":22601,"line_start":663,"line_end":663,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [f64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [f64]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [IpAddr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [IpAddr]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [IpAddr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [IpAddr]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [Ipv4Addr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [Ipv4Addr]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [Ipv4Addr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [Ipv4Addr]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [Ipv6Addr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [Ipv6Addr]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [Ipv6Addr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [Ipv6Addr]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [std::net::SocketAddr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [std::net::SocketAddr]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [std::net::SocketAddr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [std::net::SocketAddr]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [SocketAddrV4]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [SocketAddrV4]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [SocketAddrV4]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [SocketAddrV4]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [SocketAddrV6]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20631,"byte_end":20634,"line_start":608,"line_end":608,"column_start":23,"column_end":26,"is_primary":true,"text":[{"text":"        OptValue::new(Box::from(self))","highlight_start":23,"highlight_end":26}],"label":"the trait `From<&mut [SocketAddrV6]>` is not implemented for `Box<dyn OptValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":22602,"byte_end":22683,"line_start":664,"line_end":664,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs","byte_start":20446,"byte_end":20473,"line_start":604,"line_end":604,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn OptValueParse<'_>>: From<&mut [SocketAddrV6]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/ovp.rs:608:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        OptValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [SocketAddrV6]>` is not implemented for `Box<dyn OptValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [String]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":9227,"byte_end":9230,"line_start":266,"line_end":266,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [String]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [String]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:266:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [String]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [PathBuf]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":10632,"byte_end":10635,"line_start":308,"line_end":308,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [PathBuf]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [PathBuf]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:308:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [PathBuf]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [char]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":12037,"byte_end":12040,"line_start":350,"line_end":350,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [char]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [char]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:350:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [char]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [bool]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [bool]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [bool]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [bool]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [usize]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [usize]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [usize]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [usize]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u8]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [u8]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u8]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u8]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u16]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [u16]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u16]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u16]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [u32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [u64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [u64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [u64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [isize]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [isize]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [isize]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [isize]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i8]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [i8]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i8]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i8]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i16]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [i16]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i16]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i16]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [i32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [i64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [i64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [i64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [f32]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [f32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [f32]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [f32]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [f64]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [f64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15349,"byte_end":15423,"line_start":451,"line_end":451,"column_start":1,"column_end":75,"is_primary":false,"text":[{"text":"add_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }","highlight_start":1,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [f64]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [f64]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [IpAddr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [IpAddr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [IpAddr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [IpAddr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [Ipv4Addr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [Ipv4Addr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [Ipv4Addr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [Ipv4Addr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [Ipv6Addr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [Ipv6Addr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [Ipv6Addr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [Ipv6Addr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [std::net::SocketAddr]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [std::net::SocketAddr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [std::net::SocketAddr]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [std::net::SocketAddr]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [SocketAddrV4]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [SocketAddrV4]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [SocketAddrV4]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [SocketAddrV4]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [SocketAddrV6]>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13693,"byte_end":13696,"line_start":399,"line_end":399,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"        ArgsValue::new(Box::from(self))","highlight_start":24,"highlight_end":27}],"label":"the trait `From<&mut [SocketAddrV6]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":15424,"byte_end":15505,"line_start":452,"line_end":452,"column_start":1,"column_end":82,"is_primary":false,"text":[{"text":"add_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }","highlight_start":1,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"add_slice_impl!","def_site_span":{"file_name":"/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs","byte_start":13505,"byte_end":13532,"line_start":395,"line_end":395,"column_start":1,"column_end":28,"is_primary":false,"text":[{"text":"macro_rules! add_slice_impl {","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `From<T>`:\n  `Box<ByteStr>` implements `From<Box<[u8]>>`\n  `Box<CStr>` implements `From<&CStr>`\n  `Box<CStr>` implements `From<&mut CStr>`\n  `Box<CStr>` implements `From<CString>`\n  `Box<CStr>` implements `From<Cow<'_, CStr>>`\n  `Box<OsStr>` implements `From<&OsStr>`\n  `Box<OsStr>` implements `From<&mut OsStr>`\n  `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\nand 25 others","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Box<dyn ArgsValueParse<'_>>: From<&mut [SocketAddrV6]>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/mark/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/app-0.6.5/src/avp.rs:399:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m399\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ArgsValue::new(Box::from(self))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<&mut [SocketAddrV6]>` is not implemented for `Box<dyn ArgsValueParse<'_>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m452\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madd_slice_impl! { IpAddr Ipv4Addr Ipv6Addr SocketAddr SocketAddrV4 SocketAddrV6 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `Box<ByteStr>` implements `From<Box<[u8]>>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<&mut CStr>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<CString>`\u001b[0m\n\u001b[0m              `Box<CStr>` implements `From<Cow<'_, CStr>>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<&mut OsStr>`\u001b[0m\n\u001b[0m              `Box<OsStr>` implements `From<Cow<'_, OsStr>>`\u001b[0m\n\u001b[0m            and 25 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `add_slice_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 43 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 43 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
